print(mosaic_plot)
library(dplyr)
library(lubridate)
data <- data %>%
mutate(
Bedtime.number = hour(strptime(Bedtime, format = "%d-%m-%Y %H:%M")),
Wakeup.time.number = hour(strptime(Wakeup.time, format = "%d-%m-%Y %H:%M"))
)
library(ggplot2)
ggplot(data, aes(x = Bedtime.number)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black", alpha = 0.7) +
labs(x = "Bedtime in 24h format", y = "Frequency") +
ggtitle("Histogram of Bedtime") +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = Wakeup.time.number)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black", alpha = 0.7) +
labs(x = "Wakeup time in am format", y = "Frequency") +
ggtitle("Histogram of Wakeup Time") +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = Bedtime.number, y = Sleep.efficiency, color = factor(Awakenings))) +
geom_point() +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
)
library(ggplot2)
ggplot(data, aes(x = Bedtime.number, y = Sleep.efficiency)) +
geom_point(aes(color = factor(Awakenings))) +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
) +
facet_grid(~Awakenings)
library(ggplot2)
data_filtered <- data %>%
filter(!(Bedtime.number >= 10 & Bedtime.number <= 19))
ggplot(data_filtered, aes(x = Bedtime.number, y = Sleep.efficiency)) +
geom_point(aes(color = factor(Awakenings))) +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
) +
facet_grid(~Awakenings)
head(data_filtered)
data_filtered <- data %>%
filter(Bedtime.number < 10 | Bedtime.number > 19)
ggplot(data_filtered, aes(x = Bedtime.number, y = Sleep.efficiency)) +
geom_point(aes(color = factor(Awakenings))) +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
) +
facet_grid(~Awakenings)
head(data_filtered)
dim(data_filtered)
dim(data)
head(data)
data_filtered <- data %>%
filter(Bedtime.number>1)
ggplot(data_filtered, aes(x = Bedtime.number, y = Sleep.efficiency)) +
geom_point(aes(color = factor(Awakenings))) +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
) +
facet_grid(~Awakenings)
head(data)
dim(data_filtered)
data_filtered <- data %>%
filter(Bedtime.number>19 | Bedtime.number<6)
ggplot(data_filtered, aes(x = Bedtime.number, y = Sleep.efficiency)) +
geom_point(aes(color = factor(Awakenings))) +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
) +
facet_grid(~Awakenings)
dim(data_filtered)
ggplot(data, aes(x = Bedtime.number, y = Sleep.efficiency)) +
geom_point(aes(color = factor(Awakenings))) +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
) +
facet_grid(~Awakenings)
ggplot(data, aes(x = Bedtime.number, y = Sleep.efficiency, color = factor(Awakenings))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
)
selected_values <- c(0,1,2,3,21,22,23,24)
# Use subset to filter based on the specified values
df_new <- subset(data, points %in% selected_values)
selected_values <- c(0,1,2,3,21,22,23,24)
# Use subset to filter based on the specified values
df_new <- subset(data, Bedtime.number %in% selected_values)
ggplot(df_new, aes(x = Bedtime.number, y = Sleep.efficiency, color = factor(Awakenings))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
)
dim(df_new)
dim(data)
selected_values <- c(0, 1, 2, 3, 21, 22, 23, 24)
# Use square bracket indexing to filter based on the specified values
df_new <- data[data$Bedtime.number %in% selected_values, ]
ggplot(df_new, aes(x = Bedtime.number, y = Sleep.efficiency, color = factor(Awakenings))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
)
dim(df_new)
selected_values <- c(0, 1, 2, 3, 21, 22, 23, 24)
df_cleaned <- data[!is.na(data$Bedtime.number), ]
df_new <- df_cleaned[df_cleaned$Bedtime.number %in% selected_values, ]
ggplot(df_new, aes(x = Bedtime.number, y = Sleep.efficiency, color = factor(Awakenings))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
)
dim(df_new)
ggplot(data, aes(x = Bedtime.number, y = Sleep.efficiency, color = factor(Awakenings))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
)
library(ggplot2)
# Your ggplot code
ggplot(data, aes(x = Bedtime.number, y = Sleep.efficiency, color = factor(Awakenings))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, size = 1, linetype = 'solid', color = 'blue') +
labs(
title = "Relationship Between Bedtime and Sleep Efficiency by Awakenings",
x = "Bedtime",
y = "Sleep Efficiency",
color = "Awakenings"
) +
scale_y_continuous(breaks = c(0, 5, 20, 25))
ggplot(data, aes(x = Sleep.duration, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
facet_wrap(~Bedtime.number, scales = "free") +  # Facet by Bedtime.number
labs(
title = "Sleep Efficiency vs. Sleep Duration Faceted by Bedtime Number with Loess Smooth",
x = "Sleep Duration",
y = "Sleep Efficiency"
)
ggplot(data, aes(x = Sleep.duration, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
facet_wrap(~Bedtime.number, scales = "free") +  # Facet by Bedtime.number
labs(
title = "Sleep Efficiency vs. Sleep Duration Faceted by Bedtime Number",
x = "Sleep Duration",
y = "Sleep Efficiency"
)
ggplot(data, aes(x = Sleep.duration, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
facet_grid(~ Wakeup.time.number, scales = "free", space = "free") +  # Facet only by Wakeup.time.number
labs(
title = "Sleep Efficiency vs. Sleep Duration Faceted by Wakeup Time",
x = "Sleep Duration",
y = "Sleep Efficiency"
)
selected_wake_times <- c(5, 6, 7, 8, 9,10,11)
subset_data <- subset(data, Wakeup.time.number %in% selected_wake_times)
ggplot(subset_data, aes(x = Sleep.duration, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
facet_grid(~ Wakeup.time.number, scales = "free", space = "free") +  # Facet only by Wakeup.time.number
labs(
title = "Sleep Efficiency vs. Sleep Duration Faceted by Wakeup Time",
x = "Sleep Duration",
y = "Sleep Efficiency"
)
selected_wake_times <- c(5,6, 7, 8, 9,10)
subset_data <- subset(data, Wakeup.time.number %in% selected_wake_times)
ggplot(subset_data, aes(x = Sleep.duration, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
facet_grid(~ Wakeup.time.number, scales = "free", space = "free") +  # Facet only by Wakeup.time.number
labs(
title = "Sleep Efficiency vs. Sleep Duration Faceted by Wakeup Time",
x = "Sleep Duration",
y = "Sleep Efficiency"
)
selected_wake_times <- c(5,6, 7, 8, 9,10)
subset_data <- subset(data, Wakeup.time.number %in% selected_wake_times)
ggplot(subset_data, aes(x = Sleep.duration, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
#facet_grid(~ Wakeup.time.number, scales = "free", space = "free") +  # Facet only by Wakeup.time.number
labs(
title = "Sleep Efficiency vs. Sleep Duration Faceted by Wakeup Time",
x = "Sleep Duration",
y = "Sleep Efficiency"
)
selected_wake_times <- c(5,6, 7, 8, 9,10)
subset_data <- subset(data, Wakeup.time.number %in% selected_wake_times)
ggplot(subset_data, aes(x = Wakeup.time.number, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
#facet_grid(~ Wakeup.time.number, scales = "free", space = "free") +  # Facet only by Wakeup.time.number
labs(
title = "Sleep Efficiency vs. Sleep Duration Faceted by Wakeup Time",
x = "Sleep Duration",
y = "Sleep Efficiency"
)
selected_wake_times <- c(5,6, 7, 8, 9,10)
subset_data <- subset(data, Wakeup.time.number %in% selected_wake_times)
ggplot(subset_data, aes(x = Wakeup.time.number, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
#facet_grid(~ Wakeup.time.number, scales = "free", space = "free") +  # Facet only by Wakeup.time.number
labs(
title = "Sleep Efficiency vs. Wakeup time number Faceted by Wakeup Time",
x = "Wakeup.time.number",
y = "Sleep Efficiency"
)
ggplot(data, aes(x = Bedtime.number, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
facet_wrap(~Bedtime.number, scales = "free") +  # Facet by Bedtime.number
labs(
title = "Sleep Efficiency vs. Bedtime.number",
x = "Bedtime number",
y = "Sleep Efficiency"
)
ggplot(data, aes(x = Bedtime.number, y = Sleep.efficiency)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # Add loess smooth line
#facet_wrap(~Bedtime.number, scales = "free") +  # Facet by Bedtime.number
labs(
title = "Sleep Efficiency vs. Bedtime.number",
x = "Bedtime number",
y = "Sleep Efficiency"
)
df<-read.csv('Sleep_Efficiency.csv')
library(dplyr)
df <- df %>% select(-ID)
library(dplyr)
df <- df %>%
mutate(Smoking.status = ifelse(Smoking.status == 'Yes', 1, 0))
df <- df %>%
mutate(Gender = ifelse(Gender == 'Male', 1, 0))
df <- df %>%
mutate(
Bedtime.number = hour(strptime(Bedtime, format = "%d-%m-%Y %H:%M")),
Wakeup.time.number = hour(strptime(Wakeup.time, format = "%d-%m-%Y %H:%M"))
)
# Assuming your dataframe is named 'df'
missing_counts <- colSums(is.na(df))
print(missing_counts)
# Fill missing values in 'Awakenings' with the minimum value
df$Awakenings <- ifelse(is.na(df$Awakenings), min(df$Awakenings, na.rm = TRUE), df$Awakenings)
# Fill missing values in 'Caffeine consumption' with the mean value
df <- df %>%
mutate(`Caffeine.consumption` = if_else(is.na(`Caffeine.consumption`), mean(`Caffeine.consumption`, na.rm = TRUE), `Caffeine.consumption`))
# Fill missing values in 'Alcohol consumption' with the mean value
df <- df %>%
mutate(`Alcohol.consumption` = if_else(is.na(`Alcohol.consumption`), mean(`Alcohol.consumption`, na.rm = TRUE), `Alcohol.consumption`))
# Fill missing values in 'Exercise frequency' with the mean value
df <- df %>%
mutate(`Exercise.frequency` = if_else(is.na(`Exercise.frequency`), mean(`Exercise.frequency`, na.rm = TRUE), `Exercise.frequency`))
head(df)
df_1=df
df_1$Smoking.Caffine.Alcohol = ifelse(df_1$Smoking.status == "Yes" | (df_1$Caffeine.consumption != 'NA' & df_1$Caffeine.consumption > 1) | (df_1$Alcohol.consumption != 'NA' & df_1$Alcohol.consumption > 1) , 1, 0)
head(df_1)
sleep.linear.model = lm(Sleep.efficiency ~  Deep.sleep.percentage * Awakenings * Smoking.Caffine.Alcohol * Exercise.frequency, data = df_1)
df_1$linear.se.predicted = sleep.linear.model$fitted.values
summary(sleep.linear.model)
library(ggplot2)
ggplot(df_1, aes(x = Sleep.efficiency, y = linear.se.predicted)) +
geom_point(alpha = 0.7, size = 3, color = "skyblue") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed", size = 1) +
geom_segment(aes(xend = Sleep.efficiency, yend = linear.se.predicted),
color = "gray", alpha = 0.5, size = 0.5) +
ggtitle("Actual vs. Predicted Sleep Efficiency") +
xlab("Actual Sleep Efficiency") +
ylab("Predicted Sleep Efficiency") +
theme_minimal() +
theme(legend.position = "none")  # Optional: remove legend if not needed
r_squared <- summary(sleep.linear.model)$r.squared
cat("R-squared: ", r_squared, "\n")
# Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((df_1$Sleep.efficiency - df_1$linear.se.predicted)^2))
cat("RMSE: ", rmse, "\n")
# Install and load the MASS package if not already installed
if (!requireNamespace("MASS", quietly = TRUE)) {
install.packages("MASS")
}
library(MASS)
# Fit Tukey's bisquare (robust) regression model
sleep.rlm.model <- rlm(Sleep.efficiency ~ Deep.sleep.percentage * Awakenings * Smoking.Caffine.Alcohol * Exercise.frequency, data = df_1)
# Predicted values
df_1$rlm.se.predicted <- predict(sleep.rlm.model)
# R-squared for robust regression
r_squared_rlm <- 1 - (sum(resid(sleep.rlm.model)^2) / sum((df_1$Sleep.efficiency - mean(df_1$Sleep.efficiency))^2))
cat("R-squared (Robust Regression): ", r_squared_rlm, "\n")
# Root Mean Squared Error (RMSE) for robust regression
rmse_rlm <- sqrt(mean((df_1$Sleep.efficiency - df_1$rlm.se.predicted)^2))
cat("RMSE (Robust Regression): ", rmse_rlm, "\n")
library(ggplot2)
# Assuming df_1 has both linear.se.predicted and rlm.se.predicted columns
ggplot(df_1, aes(x = Sleep.efficiency, y = rlm.se.predicted)) +
geom_point(alpha = 0.7, size = 3, color = "skyblue") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed", size = 1) +
geom_segment(aes(xend = Sleep.efficiency, yend = rlm.se.predicted),
color = "gray", alpha = 0.5, size = 0.5) +
ggtitle("Actual vs. Predicted Sleep Efficiency (Robust Regression)") +
xlab("Actual Sleep Efficiency") +
ylab("Predicted Sleep Efficiency") +
theme_minimal() +
theme(legend.position = "none")
# Fit the linear model
sleep.linear.model <- lm(Sleep.efficiency ~ Deep.sleep.percentage * Awakenings * Smoking.Caffine.Alcohol * Exercise.frequency, data = df_1)
# Fit the robust linear model
sleep.rlm.model <- rlm(Sleep.efficiency ~ Deep.sleep.percentage * Awakenings * Smoking.Caffine.Alcohol * Exercise.frequency, data = df_1)
# Create residuals plots for both models
par(mfrow = c(1, 2))  # Set up a 1x2 grid for side-by-side plots
# Residuals plot for the linear model
plot(sleep.linear.model, which = 1, main = "Residuals Plot - Linear Model")
# Residuals plot for the robust linear model
plot(sleep.rlm.model, which = 1, main = "Residuals Plot - RLM")
# Reset the plotting layout to default
par(mfrow = c(1, 1))
ggplot(df_1, aes(x = Sleep.efficiency, y = linear.se.predicted)) +
geom_point(alpha = 0.7, size = 3, color = "skyblue") +
geom_density_2d(color = "red") +
ggtitle("Density Plot of Actual vs. Predicted Sleep Efficiency") +
xlab("Actual Sleep Efficiency") +
ylab("Predicted Sleep Efficiency") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_1, aes(x = Sleep.efficiency, y = linear.se.predicted)) +
geom_point(alpha = 0.5, size = 3, color = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1) +
ggtitle("Smooth Scatter Plot of Actual vs. Predicted Sleep Efficiency") +
xlab("Actual Sleep Efficiency") +
ylab("Predicted Sleep Efficiency") +
theme_minimal() +
theme(legend.position = "none")
sleep.linear.model.wi = lm(Sleep.efficiency ~  Deep.sleep.percentage + Awakenings + Smoking.Caffine.Alcohol + Exercise.frequency, data = df_1)
df_1$linear.se.predicted = sleep.linear.model.wi$fitted.values
sleep.linear.model.wi = lm(Sleep.efficiency ~  Deep.sleep.percentage + Awakenings + Smoking.Caffine.Alcohol + Exercise.frequency, data = df_1)
df_1$linear.se.predicted.wi = sleep.linear.model.wi$fitted.values
library(ggplot2)
ggplot(df_1, aes(x = Sleep.efficiency, y = linear.se.predicted.wi)) +
geom_point(alpha = 0.7, size = 3, color = "skyblue") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed", size = 1) +
geom_segment(aes(xend = Sleep.efficiency, yend = linear.se.predicted.wi),
color = "gray", alpha = 0.5, size = 0.5) +
ggtitle("Actual vs. Predicted Sleep Efficiency") +
xlab("Actual Sleep Efficiency") +
ylab("Predicted Sleep Efficiency") +
theme_minimal() +
theme(legend.position = "none")  # Optional: remove legend if not needed
ggplot(df_1, aes(x = Sleep.efficiency, y = linear.se.predicted.wi)) +
geom_point(alpha = 0.5, size = 3, color = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1) +
ggtitle("Smooth Scatter Plot of Actual vs. Predicted Sleep Efficiency") +
xlab("Actual Sleep Efficiency") +
ylab("Predicted Sleep Efficiency") +
theme_minimal() +
theme(legend.position = "none")
r_squared <- summary(sleep.linear.model.wi)$r.squared
cat("R-squared: ", r_squared, "\n")
# Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((df_1$Sleep.efficiency - df_1$linear.se.predicted.wi)^2))
cat("RMSE: ", rmse, "\n")
sleep.linear.model = lm(Sleep.efficiency ~  Deep.sleep.percentage * Awakenings * Smoking.Caffine.Alcohol * Exercise.frequency, data = df_1)
df_1$linear.se.predicted = sleep.linear.model$fitted.values
summary(sleep.linear.model)
head(df_1)
colnames(df_1)
library(ggplot2)
ggplot(df_1, aes(x = Sleep.efficiency, y = linear.se.predicted)) +
geom_point(alpha = 0.7, size = 3, color = "skyblue") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed", size = 1) +
geom_segment(aes(xend = Sleep.efficiency, yend = linear.se.predicted),
color = "gray", alpha = 0.5, size = 0.5) +
ggtitle("Actual vs. Predicted Sleep Efficiency") +
xlab("Actual Sleep Efficiency") +
ylab("Predicted Sleep Efficiency") +
theme_minimal() +
theme(legend.position = "none")  # Optional: remove legend if not needed
ggplot(df_1, aes(x = Sleep.efficiency, y = linear.se.predicted)) +
geom_point(alpha = 0.5, size = 3, color = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1) +
ggtitle("Smooth Scatter Plot of Actual vs. Predicted Sleep Efficiency") +
xlab("Actual Sleep Efficiency") +
ylab("Predicted Sleep Efficiency") +
theme_minimal() +
theme(legend.position = "none")
r_squared <- summary(sleep.linear.model)$r.squared
cat("R-squared: ", r_squared, "\n")
# Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((df_1$Sleep.efficiency - df_1$linear.se.predicted)^2))
cat("RMSE: ", rmse, "\n")
# Install and load the MASS package if not already installed
if (!requireNamespace("MASS", quietly = TRUE)) {
install.packages("MASS")
}
library(MASS)
# Fit Tukey's bisquare (robust) regression model
sleep.rlm.model <- rlm(Sleep.efficiency ~ Deep.sleep.percentage * Awakenings * Smoking.Caffine.Alcohol * Exercise.frequency, data = df_1)
# Predicted values
df_1$rlm.se.predicted <- predict(sleep.rlm.model)
# R-squared for robust regression
r_squared_rlm <- 1 - (sum(resid(sleep.rlm.model)^2) / sum((df_1$Sleep.efficiency - mean(df_1$Sleep.efficiency))^2))
cat("R-squared (Robust Regression): ", r_squared_rlm, "\n")
# Root Mean Squared Error (RMSE) for robust regression
rmse_rlm <- sqrt(mean((df_1$Sleep.efficiency - df_1$rlm.se.predicted)^2))
cat("RMSE (Robust Regression): ", rmse_rlm, "\n")
sleep.linear.model.mix = lm(Sleep.efficiency ~  Deep.sleep.percentage * Awakenings * Smoking.Caffine.Alcohol * Exercise.frequency+Deep.sleep.percentage+Awakenings+Smoking.Caffine.Alcohol+Exercise.frequency, data = df_1)
df_1$linear.se.predicted.mix = sleep.linear.model$fitted.values
ggplot(df_1, aes(x = Sleep.efficiency, y = linear.se.predicted.mix)) +
geom_point(alpha = 0.5, size = 3, color = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1) +
ggtitle("Smooth Scatter Plot of Actual vs. Predicted Sleep Efficiency") +
xlab("Actual Sleep Efficiency") +
ylab("Predicted Sleep Efficiency") +
theme_minimal() +
theme(legend.position = "none")
r_squared <- summary(sleep.linear.model.mix)$r.squared
cat("R-squared: ", r_squared, "\n")
# Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((df_1$Sleep.efficiency - df_1$linear.se.predicted.mix)^2))
cat("RMSE: ", rmse, "\n")
# Scatter plot of observed vs predicted values
plot(df_1$Sleep.efficiency, df_1$linear.se.predicted,
pch = 16, col = "skyblue", main = "Observed vs Predicted Sleep Efficiency",
xlab = "Observed Sleep Efficiency", ylab = "Predicted Sleep Efficiency")
# Add a diagonal line for reference
abline(a = 0, b = 1, col = "red", lty = 2)
# Customize the plot if needed
residuals <- resid(sleep.linear.model)
# Create QQ plot
qqnorm(residuals)
qqline(residuals, col = "red")
# Add title and labels
title("QQ Plot of Residuals")
xlabel <- "Theoretical Quantiles"
ylabel <- "Sample Quantiles"
mtext(xlabel, side = 1, line = 3)
mtext(ylabel, side = 2, line = 3)
residuals <- resid(sleep.linear.model)
# Create QQ plot
qqnorm(residuals)
qqline(residuals, col = "red")
# Add title and labels
title("QQ Plot of Residuals")
xlabel <- "Theoretical Quantiles"
ylabel <- "Sample Quantiles"
mtext(xlabel, side = 1, line = 3)
mtext(ylabel, side = 2, line = 3)
residuals <- resid(sleep.linear.model)
# Create a blank plot to set up the axis
plot(1, type = "n", xlab = "", ylab = "", main = "", xlim = c(-2, 2), ylim = c(-2, 2))
# Create QQ plot
qqnorm(residuals)
qqline(residuals, col = "red")
# Add title and labels
title("QQ Plot of Residuals", line = 0.5)  # Adjust 'line' parameter for title position
xlabel <- "Theoretical Quantiles"
ylabel <- "Sample Quantiles"
mtext(xlabel, side = 1, line = 3)
mtext(ylabel, side = 2, line = 3)
setwd("C:/Users/Chintan/Downloads/Fall Sem 2023/Exploratory Data Analysis/Final Project")
z
